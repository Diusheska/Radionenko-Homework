import codecs
import re
import tkinter as tk
from collections import Counter
from functools import reduce
from itertools import chain
from tkinter import filedialog


print("Hi! Please select a file to open\n")

# give user an option to browse for file. Open file, read, switch to lower
while True:
    try:
        root = tk.Tk().withdraw()
        file_path = filedialog.askopenfilename()
        with codecs.open(file_path, encoding='utf-8') as f_obj:
            text = f_obj.read().lower()
    except FileNotFoundError:
        print("No file or file path\n")
        continue
    else:
        textlist = text.splitlines()
        break

# find max possible length of the word in file
ml = (max(list(map(lambda x: int(len(x)), textlist))))

# ask user for the number of letters in his/her word
print("Now let's play! Select a word from the file and give me few hints.")
while True:
    try:
        wl = int(input("How many letters does your word have?\n"))
    except ValueError:
        print("This is not an integer\n")
        continue
    else:
# check if user input is in within word length
        if 0 < wl <= ml:
            break
        else:
            print("Sorry, no such words in your file\n")
            continue

# define word display
word = ["-"]*wl

# count number of game attempts
attempts = 0

# display how the word looks like
def show_word(w):
    print("\nThis is how the word looks now:")
    print(' '.join(map(str, w)))

# call function to show the word at the beginning
show_word(word)

# list of words filtered based on user's answer
f = list(filter(lambda x: int(len(x)) == wl, textlist))

# count total characters quantity in the filtered list except for letters already known
def filter_length(lst):
    known_letters = list(filter(lambda x: x in word, (list(chain.from_iterable(lst)))))
    fl = reduce(lambda x, y: x+y, list(map(lambda x: int(len(x)), lst))) - len(known_letters) # we only care about quantity of unguessed letters in the filtered list
    return fl

# show the most frequent character for specific list of words
def cnt_char(lst):
    unknown_letters = list(filter(lambda x: x not in word, (list(chain.from_iterable(lst)))))
    cnt = dict(Counter(unknown_letters).most_common(1))
    for char, freq in cnt.items():
        freq = int(freq)
        return char, freq

# check if there are still any unknown letters in the word:
def check_win(word):
    if word.count("-") == 0:
        return True
    else:
        return False

# sdk user for first letter prompt and update the filtered list based on this prompt
def user_prompt():
    global f
    global word
    # ask for the any letter hint
    print ("\nAny letter prompts? Type your word with letter(s) and '-' in it and hit Enter:")
    while not (f == []):
        inp = input()
        if int(len(inp)) == wl:
            word = inp
            inp = inp.replace("-", ".")
            r = re.compile(inp)
            f = list(filter(r.match, f))
            break
        else:
            print("Sorry, this doesn't match your word length. Please try again:")
            continue
    else:
        print("Sorry, such word doesn't exist in our dictionary. I give up.")

# computer tries to guess the letter:
def try_to_guess():
    global f
    global word
    global attempts
# find the most frequent character from filtered list:
    char, freq = cnt_char(f)
    fl = filter_length(f)
    print("\nThanks! I guess there could be '{}' in your word.".format(char),"Its probability is {0:.0%}.".format(freq/fl))
    attempts += 1
    inp = input("Is it there? Type the word with this letter(s) in OR type 'N' for 'no'\n").lower()
    if inp == "n":
# filter out words with this letter from the list
        f = list(filter(lambda w: all([letter != char for letter in w]), f))
    else:
        while not (f==[]):
            if int(len(inp)) == wl:
                word = inp
                inpt = inp.replace("-", ".")
                r = re.compile(inpt)
                f = list(filter(r.match, f))
                break
            else:
                print("Sorry, this doesn't match your word length. Please try again:\n")
                break
            continue
        else:
            print("Sorry, such word doesn't exist in our disctionary. I give up")

# actual game
def play_game():
    user_prompt()
    while not (check_win(word) or f == []):
        try_to_guess()
    else:
        if f == []:
           print("Sorry, such word doesn't exist in our dictionary. I give up.")
        elif check_win(word):
            print("\nI did it! I'm a very smart computer! It took me {} attempts".format(attempts))

play_game()
