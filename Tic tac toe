import random
import math

board = range(1,10)

# define board matrix size
ms = int(math.sqrt(len(board)))

# game board
gb = []
for i in board:
    gb.append(i)

# game board matrix represenation
def display_board(gb):
    for i in range(ms):
        print ( "|", gb[0+i*ms], "|", gb[1+i*ms], "|", gb[2+i*ms], "|")


# rows, columns and diagonals of game board
def dimensions(gb):
    row0 = gb[0:ms]
    row1 = gb[ms:ms*2]
    row2 = gb[ms*2:ms*3]
    col0 = gb[0:(ms**2):ms]
    col1 = gb[1:(ms**2):ms]
    col2 = gb[2:(ms**2):ms]
    diag1 = gb[0:(ms**2):(ms+1)]
    diag2 = gb[(ms-1):(ms**2-1):(ms-1)]
    dims = [row0, row1, row2, col0, col1, col2, diag1, diag2]
    return dims


print ("Hi! Let's play tic tac toe! Here is our game board:\n")
display_board(gb)


# let user decide if he wants to play X or O. X will start the game
def set_player():
    player1 = ""
    player2 = ""
    while player1 == "" and player2 == "":
        while True:
            choice = input("\nDo you want to be X or O? Please type X or O:\n").upper()
            if choice == "X":
                player1 = "X"
                player2 = "O"
                break
            elif choice == "O":
                player1 = "O"
                player2 = "X"
                break
            else:
                print("You can only select X or O.")
                continue
        print ("Thanks! You will play with",player1,", "  "and I will be", player2,". The player with X goes first")
        return (player1, player2)


player1, player2 = set_player()


# user move
def make_move_user(gb, player1):
    while True:
        try:
            position = int(input("\nTo make a move, please select a position on our game board. Enter value 1-9:\n"))
# validate if user input is integer. if not, throw an error:
        except ValueError:
            print("This is not an integer. Please enter value 1-9")
            continue
        else:
# check if user input is in board range (1-9)
            if position in board:
                 position = position - 1
            else:
                print("Value is out of range.")
                continue
 # check if selected position hasn't been taken
        if gb[position] in board:
            gb[position] = player1
            display_board(gb)
            dimensions(gb)
            break
        else:
            print ("This position has already been taken.")
        continue


# find vacant positions in a list
def find_freespots(mylist) :
    freespots = [i for i in mylist if isinstance(i, int)]
    return freespots


# program move
def make_move_comp(player1, player2, gb, dims):
    print("\nMy turn!")
# try to win
    for i in range(int(len(dims))):
        if (    dims[i].count(player2) == ms-1
            and dims[i].count(player1) == 0):
            position = random.choice(find_freespots(dims[i]))-1
            gb[position] = player2
            display_board(gb)
            return
# prevent player1 from winning
    for i in range(int(len(dims))):
        if (    dims[i].count(player1) == ms-1
            and dims[i].count(player2) == 0):
            position = random.choice(find_freespots(dims[i]))-1
            gb[position] = player2
            display_board(gb)
            return
# otherwise make move in the same dimension (row, column, diagonal) where you already have moves and no player 1 moves
    for i in range(int(len(dims))):
        if (    dims[i].count(player2) > 0
            and dims[i].count(player1) == 0):
            position = random.choice(find_freespots(dims[i]))-1
            gb[position] = player2
            display_board(gb)
            return
# otherwise position your moves randomly
    position = random.choice(find_freespots(gb))-1
    gb[position] = player2
    display_board(gb)


# check if there is a winner, return winner sing (X/O)
def check_winner(dims):
    for i in range (int(len(dims))):
        if dims[i].count(player1) == ms:
            print ("We've got a winner! And the winner is",player1)
            return
        elif (dims[i].count(player2)) == ms:
            print ("We've got a winner! And the winner is",player2)
            return
    return False

# check for the tie
def check_tie(gb):
    if sum(1 for m in gb if m in board) == 0:
        print("Oooops! There is a tie!")
        return True
    else:
        return False

# check if tie or winner return true
def end_game():
    while (check_tie(gb) == True
        or check_winner(dimensions(gb))!= False):
        print("\nWanna play again?")
        play_again()
        return True
        break
    else:
        return False

# if win or a tie, let user play again
def play_again():
    global gb
    inp = ""
    while not (inp == "Y" or inp == "N"):
        inp = input("Type Y for 'yes' or N for 'no':\n").upper()
        if inp == "N":
            break
        elif inp == "Y":
            gb = []
            for i in board:
                gb.append(i)
            player1, player2 = set_player()
            play_game(player1, player2)
        else:
            print("Invalid input")
            continue
    return
# actual game
def play_game(p1, p2):
    while True:
        if p1 == "X":
                make_move_user(gb, p1)
                if end_game():
                    break
                make_move_comp(p1, p2, gb, dimensions(gb))
                if end_game():
                    break
        elif p2 == "X":
                make_move_comp(p1, p2, gb, dimensions(gb))
                if end_game():
                    break
                make_move_user(gb, p1)
                if end_game():
                    break


play_game(player1, player2)
